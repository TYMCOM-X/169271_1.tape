entry s!Data, s!EOR, s!EOF, s!EOD, sendOne, end!buffer;
begin "send package"
external procedure x!packet( string packet );

COMMENT this package defines:
	sendOne( integer aByte, class!spec(-1) ):
	s!EOD( integer c!spec(-1) ):
	s!EOF( integer c!spec(-1) ):
	s!EOR( integer c!spec(-1) ):
	s!Data( string data: integer c!spec(-1) ):
	end!buffer:
and calls x!packet for buffer out (a call with NULL indicates flush)
;
require "(SAILIB)SAIL.DEF" source!file;
let routine=procedure;
define eif="else if";

define #E.BL='100;	! ebcdic blank;

integer routine dec( reference integer variable; integer val(1) );
	return( variable := variable - val );

integer routine inc( reference integer variable; integer val(1) );
	return( variable := variable + val );

simple string procedure construct!string( integer bytepointer, size );
begin!code	define temp='14;
	push	sp,size;
	push	sp,bytepointer;
	pop	p,temp;
	sub	p,[!xwd(2,2)];
	jrst	(temp);
end;
COMMENT ******* Appendix A-1 *******; 
define	dataClass.isData	= '200
,	dataClass.target.mask	= '140
,	  dataClass.target.link	= '000
,	  dataClass.target.data	= '040
,	  dataClass.target.2	= '100
,	  dataClass.target.3	= '140
,	dataClass.isServer	= '020
,	dataClass.isVital	= '010
,	dataClass.meaning.mask	= '007
,	  !Reply.Optional		= '000
,	  !Reply.Required		= '001
,	  !Positive.Reply		= '002
,	  !Negative.Reply		= '003
,	  !Explanatory.Reply		= '004
,	  !Information.Request		= '005
;

COMMENT ******* Appendix A-2 *******; 
define	dataHeader.opcode.mask	= '340
,	dataHeader.op0.EOR	= '040
,	dataHeader.opx.AsIs	= '040
,	dataHeader.op0.EOF	= '100
,	dataHeader.opx.Zero	= '100
,	dataHeader.op0.EOD	= '140
,	dataHeader.opx.SPACE	= '140
,	dataHeader.opx.COPY	= '200
,	dataHeader.opx.BLANK	= '240
,	dataHeader.count.mask	= '037
;

COMMENT ******* Appendix A-3 *******; 
define	LinkControl.isYours	= '200
,	LinkControl.op.mask	= '177
,	LinkControl.op.header	= '001
,	LinkControl.op.trailer	= '002
,	LinkControl.op.nonSpec	= '003
,	LinkControl.op.setACK	= '004
,	LinkControl.op.setNAK	= '005
,	LinkControl.op.setRFR	= '006
,	LinkControl.op.setSI	= '007
,	LinkControl.op.setSO	= '010
,	LinkControl.op.Xmt.bits	= '011
,	LinkControl.op.timeout	= '012
,	LinkControl.op.MaxPacket ='013
,	LinkControl.op.Config	= '014
,	LinkControl.op.nameIt	= '015
,	LinkControl.op.PID.range ='016
;

COMMENT ******* Appendix A-4 *******; 
define	ApplControl.op.do.send	= '001
,	ApplControl.op.do.receive ='02
,	ApplControl.op.start.xfr ='003
,	ApplControl.op.stop.xfr	= '004
,	ApplControl.op.stop.FTP	= '005
,	ApplControl.op.is.name	= '006
,	ApplControl.op.treatment ='007
,		treatment.replace	= 1 
,		treatment.append	= 2
,		treatment.must.exist	= 3 
,	ApplControl.op.size.bytes='010
,	ApplControl.op.File.type ='011
,		file.type.Bytes		= 1 
,		file.type.Bits		= 2
,		file.type.AST		= 3 
,	ApplControl.op.rec.size	= '012
,	ApplControl.op.size.recs ='013
,	ApplControl.op.Author	= '014
,	ApplControl.op.create	= '015
,	ApplControl.op.update	= '016
,	ApplControl.op.now	= '017
;
define b!chars = 70;
integer	buffer!room
,	buffer!base
,	buffer!pointer
,	current!class
;
simple procedure setup!buffers;
begin	own safe integer array buffer[0:b!chars div 4];
!	integer i;
! for i := 0 step 1 until 3  do ;
      begin
	current!class := 0;	! the great classless society;
	buffer!room := b!chars;
	buffer!base := point(8, buffer[0], -1);
	buffer!pointer := buffer!base;
	current!class := -1;	! a nice invalid class;
      end;
end;
require setup!buffers initialization;

integer routine room!check;
! returns a number of bytes that you WILL be able to get by request;
return( if buffer!room > 1 then buffer!room else b!chars-5 );
	! don't ever say I never lied to you (-5 is just fine folks);

routine flush!buffer;
! flush current buffer and error check for safety.;
begin	string packet;
if not(0 <= buffer!room < b!chars-1)	! -1 for class byte.;
 then usererr( buffer!room, 3, "Unexpected buffer space:" );
packet := construct!string( buffer!base, b!chars - buffer!room );
x!packet( packet );
buffer!room := b!chars; buffer!pointer := buffer!base;
current!class := -1;	! a nice invalid class;
end;

INTERNAL routine end!buffer; 
begin
if buffer!room neq b!chars then flush!buffer;
x!packet( null );
end;

integer procedure class!set( integer alloc!size, class!spec(-1) );
! returns a byte pointer to opened room (dpb to first one);
begin	integer r;
if class!spec = -1 then class!spec := current!class;
if buffer!room < alloc!size or current!class neq class!spec
 then begin 
	if buffer!room neq b!chars then flush!buffer;
	if buffer!room <= alloc!size
	 then usererr( buffer!room, 3, "Indivisible Request too big:");
	idpb( current!class := class!spec, buffer!pointer );
	dec( buffer!room );
      end;
dec( buffer!room, alloc!size );
ibp(buffer!pointer); 
if dec(alloc!size)<1 then return( buffer!pointer )
 else begin
	r := buffer!pointer;
	if alloc!size>4 then buffer!pointer := adjbp( alloc!size, r )
	 else do ibp(buffer!pointer) until dec(alloc!size) = 0;
	return( r );
      end;
end;
INTERNAL routine sendOne( integer aByte, class!spec(-1) ); 
begin
dpb( aByte, class!set( 1, class!spec ) );
end;

routine sendTwo( integer aByte, nextByte, class!spec(-1) ); 
begin	integer ptr;
dpb( aByte, ptr := class!set( 2, class!spec ) );
idpb(nextByte, ptr);
end;

routine sendShortStream( integer aByte; string rest;
				integer class!spec(-1) ); 
begin	integer ptr;
dpb( aByte, ptr := class!set( 1 + length(rest), class!spec ) );
while length(rest) do idpb( lop(rest), ptr );
end;

INTERNAL routine s!EOD( integer c!spec(-1) );
		dpb(dataHeader.op0.EOD, class!set(1,c!spec));
INTERNAL routine s!EOF( integer c!spec(-1) );
		dpb(dataHeader.op0.EOF, class!set(1,c!spec));
INTERNAL routine s!EOR( integer c!spec(-1) );
		dpb(dataHeader.op0.EOR, class!set(1,c!spec));
INTERNAL procedure s!Data( string data; integer target );
! sends all the characters in <data> in the current data class;
begin
	procedure send1( integer byte ); 
		sendOne( byte, target );
	procedure send2( integer b1, b2 );
		sendTwo( b1, b2, target );
	procedure sendX( integer b; string s ); 
		sendShortStream( b, s, target );
while length(data)
   do begin	integer ch, reps;
		string copy;
	copy := data;
	ch := lop(data);
	if ch = data then begin
		for reps := 1 step 1 while length(data)
		   do if ch neq lop(data)	! ...;
			then begin data:= copy[reps+1 to inf]; done; end
			eif reps > 31
			 then begin
				dec(reps,31);
				copy := copy[32 to inf];
				if ch=#SP then send1( 31
						+ dataHeader.opx.SPACE )
				eif ch=0 then send1( 31
						+ dataHeader.opx.ZERO )
				eif ch=#E.BL then send1( 31
						+ dataHeader.opx.BLANK )
				else send2(31+dataHeader.opx.COPY, ch);
			      end;
		if ch=#SP 
			then send1( reps + dataHeader.opx.SPACE )
		eif ch=0 
			then send1( reps + dataHeader.opx.ZERO )
		eif ch=#E.BL
			then send1( reps + dataHeader.opx.BLANK )
		eif reps = 1 
			then data := copy	! NOTE:32 copy(n) case;
		else send2( reps + dataHeader.opx.COPY, ch );
	      end
	eif ch=#sp then begin		! ASCII space: multi seen above;
		send1( DataHeader.opx.SPACE + 1 );
	      end
	eif ch='100 then begin		! EBCDIC blank:multi seen above;
		send1( DataHeader.opx.BLANK + 1 );
	      end
	 else begin "as is"	! good old vanilla data;
			integer lenFloor, len;
! it is worth it to drop the count;
!  for 2-in-a-row Nulls, Spaces, or Blanks (even money & new count);
! 	... <rep(sp):2> <asis 1> ...  <=>  ... <sp> <sp> ...;
!  for 3-in-a-row anything;
! 	... <rep(next):3> <W> <asis 1> ...  <=>  ... <W> <W> <W> ...;
! sometimes better to stop before the last white in a unit instead of;
!;
		lenFloor := 0 max (length(copy)+1-(32 min room!check));
		while length(data) > lenFloor
		   do begin "another asis char"
			ch := lop(data);
			if length(data) and ch = data
			 then begin	! a match;
				if ch=0 or ch=#sp or ch=#E.BL
				or ch = data[2 for 1]
				 then begin   ! went one too far;
					data := copy[inf - length(data)
							to inf];
					done "another asis char";
				      end;
			      end;
		      end "another asis char";
		sendX( DataHeader.opx.AsIs + length(copy) - length(data)
			, copy[1 for inf-length(data)] );
	      end "as is";
      end;
end;
end "send package" .
