IFCR FALSE THENC

  string procedure invtab( reference string s; integer brktab;
				reference integer brkchar );
  begin error( "bad (or unset) break table" ); return(null); end;

internal simple string procedure rvscan( reference string s;
			integer brktab; reference integer brkchar );
start!code "rvscan"
	label	trubrk, bytldb, bytild, ulbrk,	notlow, inbrk,
		nolop,	nobrk,	l.junk, retarg, alldon, atbrkc,
		atbrk,	scnadd, brkret;
	define	lstr=1, cnt=2, bbrk=4, chnd=5, chnl=6, bdsp=chnl+1,
		bywd='10, byno = bywd+1, char='13, temp='14,
		sp='16, p='17;
	integer junk;
	string stemp;
! start: -3(p): address of sail string to be scanned (S)
	 -2(p): break table number
	 -1(p): address of break character variable
	  0(p): return address
;

dscr	code entry [inline]	handle degenerate cases (null & break 0)
	call:	-3(p): @S
		-2(p): break table
	sets:	LSTR: address of S,
		CNT: length(S)
	abort:	if length(s)=0 or chnl=0 ==> retarg
	normal: sets CHNL: brktab (non-zero)
		guarantee S non-null (so CNT > 0).
;
	move	lstr,-3(p);	! get the address of the string;
	hrrz	cnt,-1(lstr);
	jumpe	cnt,retarg;	! eliminate case of null string;

	skipn	chnl,brktab;
	 jrst	retarg; 	! break table 0, just pass entire string;
ENDC
IFCR FALSE THENC

dscr	chkbrk [inline] 	check break table number (BRKTAB)
	call:	CHNL: brktab. (non-zero)
	abort:	if not (-18 < chnl < 56)
		or break group not allocated
		or break table not inited	then error exit via invtab.
	normal: sets	BBRK: bit mask for break table
			CHND: [address] ascii.break.table(char)
			 [ie:  tdnn bbrk,@chnd	skip iff (char) is a break]
			CHNL:	tsnn bbrk,brkcvt(chnl) skip iff Konvert
				tsne bbrk,brkomt(chnl) skip iff has omits
			BDSP:	skipg (bdsp)  skip iff Retain mode,
				skipl (bdsp)  skip iff Append mode,
				skipe (bdsp)  skip iff Skip mode.
;
	addi	chnl,17;	! now get break table group;
	cail	chnl,0;
	caile	chnl,17+55;
	 jrst	invtab; 	! invalid break table, bitch and moan;
	idivi	chnl,18;
	add	chnl,gogtab;
	skipn	chnl,bktptr(chnl);
	 jrst	invtab; 	! unallocated break group, bitch and moan;

	movei	chnd,brktbl(chnl);
	hrli	chnd,char;	! chnd is indirected to get char bits;

	movn	temp,bdsp;	! now bbrk_ bit ((brktab+17) mod 18);
	hrlzi	bbrk,'400000;
	lsh	bbrk,(temp);

	tsnn	bbrk,bkjffo(chnl);	! right half bit check;
	 jrst	invtab; 	! break not INITed, bitch and moan;

	addi	bdsp,1+dsptbl(chnl);	! break disposition code location;
ENDC
begin "program"
define !="COMMENT";
simple integer procedure scnpts( string s; integer xwdbits;		
			integer mask,a.bound,z.bound,tbl;
			reference integer l.norm );
start!code	define sp='16, a=1,c=3, ch=2,bits=4,b.bits=5,o.bits=6;
		label lstchr, nocnvl, endwrd;
COMMENT
C:	(AC) characters remaining (0 when processing last character)
CH:	(AC) indexing AC to hold character
l.b:	[result: A Left] C at last "break" in token mode scan
l.bo:	[result: A Right] C at last "break" in non-token mode scan
BITS:	(AC) XWD table-bit, table-bit 
B.BITS:	(AC) XWD table-bit, 0
O.BITS:	(AC) XWD 0, table-bit
L.NORM:	C at last "normal" (non omit/break) character (dist from INF)
	[an output]
MASK:	bits on wherever characters are not allowed to have bits
A.BOUND: if Konvert or Convert table, value of "A" which gets converted
Z.BOUND: if Konvert or Convert table, value of "Z" which gets converted
TBL:	XWD CH, table-Base
;
	movei ch,ch;  hrlm ch,tbl;	! just for testing;
	MOVE	BITS,XWDBITS;	! get copy of word with both bits on;
	HRLZI	B.BITS,(BITS);	! break bit.;
	HRRZI	O.BITS,(BITS);	! omit bit.;
	HRRZ	C,-1(SP);
	HRRZI	A,(C);
LSTCHR:	MOVNM	C,L.NORM;	! a real character, store its location;
	HRLI	A,(A);		! promote last break/omit to true break;
	
NOCNVL:	SOJL	C,ENDWRD;	! all done?;
	ILDB	CH,(SP);	! get character;
	TDNE	CH,MASK;	! Check for bounds;
	 HRROI	CH,-1;		! outabounds char use this index;
	CAML	CH,A.BOUND;
	 CAMLE	CH,Z.BOUND;
	  CAIA;
	  XORI	CH,40;
	TDNN	BITS,@TBL;	! classify the character;
	 JRST	LSTCHR;		! normal character, promote break/omit;
	TDNN	B.BITS,@TBL;
	 JRST	NOCNVL;		! omit character, slide on by (...);
	HRRI	A,(C);		! must be at least a break/omit;
	TDNN	O.BITS,@TBL;
	 HRLI	A,(A);		! true break, save location; 
	JRST	NOCNVL;		
ENDWRD:
	HRRZ	C,-1(SP);
	ADDM	C,L.NORM;
	HRLI	C,(C);
	SUBM	C,A;
end;
simple procedure check( integer brk; string s );
if brk neq 0 then
begin	integer g,sg, bits, cp,np, a.let,pntr;
	REQUIRE "(FTSYS)GOGTAB.DEF" SOURCE!FILE;
	EXTERNAL INTEGER ARRAY GOGTAB[0:ENDREN];

if not(-18<brk<56)
 then begin print("Invalid table: ", brk); return; end;
g_(brk+17) div 18;
sg_ (brk+17) mod 18;
if 0 = pntr_ gogtab[bktptr+g]
 then begin print("Unallocated break table: ", brk); return; end;
bits_ (1 rot -1) lsh -sg;
bits_ bits lor (bits rot -18);
a.let_ 0; ! (if anycase then if upcase then "a" else "A" else 0);
cp_ scnpts( s, bits, 
	lnot ! (memory[pntr+?+sg] land '777777); '177, 
	a.let, if a.let then a.let+("Z"-"A") else -1,
	pntr,
	np );
print(" b-break: ", cp lsh -18, ", t-break: ", cp land '777777,
		", last normal at: ", np, " -- l:", length(s),"
b: """, s[cp lsh -18 to np], """, t: """, s[cp land '777777 to np], """
" );
end;
integer b;
setbreak(b_getbreak, "+*", "-*", "INS");
while true do begin print("test: "); check( b, inchwl ); end;
end;
inbrk:
dscr	post-scanning cleanup, final for S and BRKCHAR, "raw" return value.
 call	-1(p): address to store break char.
	char: value to store there (converted if necessary)
	lstr: address of bytepointer to S (the reference argument)
	cnt:  character number (within S) of break character
	bdsp: address of brk char dispatch code
	byno: byte number (0:5) for break char -- an index to bytldb
	bywd: word address that goes with byno
		ldb char,bytldb(byno) load char with the char within S
			that was the actual char broken on.
	then pushj p,inbrk
 ret	S and BRKCHAR with proper final values for RVSCAN
	one new string on stack
	    (the return value as if the table has no conversion or omits)
	temp: the first word of that string descriptor
	bdsp: brk char dispatch code (NOT its address)
	bbrk,chnl unchanged
;
	movem	char,@-1-1(p);	! save break character;
	move	temp,-1(lstr);	! temp_ first word of original string;
				! (constant/allocated),,size;
	hrrm	cnt,-1(lstr);
	! original string_ original string[1 through break.char#];
	skipg	bdsp,(bdsp);	! if break table not in retain mode;
	 sos	-1(lstr);	! then drop the break char;

! now S has been properly stripped;
! make a string: original string [break.char# to inf];
	subi	temp,-1(cnt);	! length(result) _ old length - break.char#;
	push	sp,temp;
	move	bytild(byno);	! get byte pointer to just before brk char;
	hrri	@0;		! eliminate indexing (get effective addr);
	tlz	'37;		! and clear indirect and indexing fields;
	push	sp,0;

	jumpl	bdsp,nolop;	! if break table retain or skip mode;
	 sos	temp,-1(sp);	! then lop off the break char;
	 ibp	(sp);
nolop:	popj	p,;		! and now ok;
nobrk: tsne	bbrk,brkomt(chnl);	! any omits in table?;
	 jrst	scan;			! yup, use scan (to do omits);
retarg: push	sp,-1(lstr);	! result_ original string;
	push	sp, 0(lstr);
	setzm	-1(lstr);	! original string_ null;
	setzm	@-1(p); 	! clear break character;
alldon: sub	p,[4 lsh 18 +4];
	jrst	@4(p);

atbrk:	tsne	bbrk,brkomt(chnl);	! any omits in table?;
	 jrst	atbrkc; 		! yup, scan may be vital (for omits);
	pushj	p,inbrk;	! fiddles strings (see dscr for inbrk);
			! inbrk is enough since no omits or casing to do.;
	jrst	alldon; 		!   then return (result);

atbrkc: pushj	p,inbrk;	! fiddles strings (see dscr for inbrk);
				! p-stack ok, sp-stack is +2 (result);
	trnn	temp,-1;	! if length(result) = 0;
	 jrst	alldon; 		!   then return (result);
	jumpl	bdsp,scnadd;	! separate append mode stuff;
		! scan must be called (to do omits and/or casing);
	movei	lstr,stemp;	! done w/ arg, now use string temp;
	pop	sp,0(lstr);	! and place "result" in stemp;
	pop	sp,-1(lstr);
		! p-stack and sp-stack ok now, lstr points at stemp;
	movem	lstr,-3(p);	! return( scan( @stemp, ;
	movei	junk;		!	brktable, ;
	movem	-1(p);		!	@junk );
	jrst	scan;		!  );

scnadd: ! was "Append" mode break, concatenate break character w/ SCAN;
		! p-stack and sp-stack ok now, lstr points at stemp;
	trnn	temp,-2;	! did it just contain a break char?;
	 jrst	brkret; 	!  yup, return( makestring(breakchar) );
	movei	lstr,stemp;	! done w/ arg, now use string temp;
	pop	sp,0(lstr);	! and place "result" in stemp;
	pop	sp,-1(lstr);
	sos	-1(lstr);	! advance stemp past break char;
	ibp	0(lstr);
	push	p,lstr; ! set for scan( @stemp, ;
	push	p,-2-1(p);	! breaktable, ;
	push	p,l.junk;	! @junk );
	push	p,char; 	! make a one-char string of break;
	pushj	p,putch;	! and save it above the SP stack;
	pushj	p,scan; 	! call scan (result goes just after break);
	pushj	p,cat;		! concatenate top of SP (break & scan);
	jrst	alldon; 	! and return that.;
l.junk: 	junk;

brkret: ! append mode, 1-character result (might have to be upper case);
	move	(sp);		! examine the character in string;
	ildb	0,0;
	cain	0,(char);	! is it the same as the break?;
	 jrst	alldon; 	! yup, just return it;
	sub	sp,['2000002];	! nope, must have been case convert.;
	push	p,char; 	! drop the string, and return( ;
	pushj	p,putch;	! makestring(char) );
	jrst	alldon;
end "rvscan";

